---
title: Wrangling OGP Tags
meta_description: Recently Iâ€™ve found myself tackling rich link unfurling on websites such as Twitter, Facebook, Slack...
date: 2016-11-09 00:01 UTC
author: Brett Jones
author_slug: brett
body_classes: page-blog
---

<%- @og_image_override = 'blog/2016-11-09-wrangling-ogp-tags' %>

<figure class="image_expand">
  <%= image_tag 'blog/2016-11-09-wrangling-ogp-tags/hero.jpg', alt: 'Rangling OGP Tags' %>
  <figcaption>We need to go deeper...</figcaption>
</figure>

Recently Iâ€™ve found myself tackling rich link unfurling on websites such as Twitter, Facebook, Slack.

Itâ€™s a small thing, but itâ€™s just an extra layer of polish thatâ€”along with gratuitous emoji usageâ€”can make you and your site look really ðŸ’¯.

It was around the third time I found myself going through the process again that I _finally_ decided to create some boilerplate stuff for myself to refer to, and figured Iâ€™d share it on this here internet thing.

## What is Open Graph?

The <%= link_to 'Open Graph', 'http://ogp.me/', target:'_blank' %> protocol is a set of standards developed by Facebook and other websites, for specifying meta information on a page, which is used to provide richer link previews.

As is always the case with <%= link_to 'â€˜standardsâ€™', 'https://xkcd.com/927/', target: '_blank' %>, there are some proprietary and competing ones. <%= link_to 'Twitter', 'https://dev.twitter.com/cards/getting-started', target: '_blank' %> has their own set of markup and specifications for rich card previews too.

Showing what can happen when you just embrace existing tags, Slack nicely unfurls links based on existing OGP and Twitter tags:

<figure class="image_expand">
  <%= image_tag 'blog/2016-11-09-wrangling-ogp-tags/unfurl.jpg', alt: 'A screenshot of a link on my blog unfurled' %>
</figure>

The corresponding bits of HTML which yields the above is straightforward:

<pre>
<code>&lt;meta property="og:title" content="Being Open"&gt;
&lt;meta property="og:description" content="After the culmination of eighteen months of hard work, the inaugural Mixin conference was held last week. A week later, Iâ€™m still reeling from the whirlwind experienceâ€¦"&gt;

&lt;meta property="fb:image" content="http://brett.cool/images/blog/2016-11-05-be-open/fb.jpg"&gt;

&lt;meta property="twitter:label1" content="Reading Time ðŸ•–"&gt;
&lt;meta property="twitter:data1" content="About 4 minutes"&gt;
&lt;meta property="twitter:label2" content="Published ðŸ“…"&gt;
&lt;meta property="twitter:data2" content="November 5, 2016"&gt;</code>
</pre>

<%= link_to 'Slack has an excellent article', 'https://medium.com/slack-developer-blog/everything-you-ever-wanted-to-know-about-unfurling-but-were-afraid-to-ask-or-how-to-make-your-e64b4bb9254#.39pruiy2j', target:'_blank' %> on the key meta properties, but this post is more interested in the process and strategies for managing these!

## Creating the images
Iâ€™ve created a Sketch Template for making these images. Any old editor will do, but Sketchâ€™s handy multi-export feature really shines when batch creating a bunch of assets.

<figure class="image_expand">
  <%= image_tag 'blog/2016-11-09-wrangling-ogp-tags/template.png', alt: 'Screenshot of Sketch template' %>
  <figcaption>Sketch template with export slices sized Facebook and Twitter<figcaption>
</figure>

The template includes a canon and some layout guides to make the creation of these images a bit quicker and easier. The og and fb image exports export to @2x scale for Facebook and Twitter respectively.

<%= link_to 'Check out the template on Github â†’', 'https://github.com/BrettJay/ogp-template', target:'_blank' %>

## File structure

As I generate images for facebook and twitter, I prefer to store them together in the same directory, with a predictable filename.

On image formats, Iâ€™m flipping from png to jpg depending on compression. Jpeg wherever photographic content is concerned, and png if itâ€™s graphical.

<pre><code># The default opengraph images
brett.cool/images/
  fb.jpg
  og.jpg

# Page-specific opengraph image overrides
brett.cool/images/page
  fb.jpg
  og.jpg

# Blog post opengraph image overrides
brett.cool/images/blog/2016-11-09-wrangling-ogp-tags/
  fb.jpg
  og.jpg</code></pre>

## Serving the images

With Middleman, I use <%= link_to 'middleman-ogp', 'https://github.com/ngs/middleman-ogp', target:'_blank' %> to specify paths to the images in page frontmatter:

<pre><code>ogp:
og:
  title: 'Page title'
  description: 'Page description'
  image:
    '': http://example.com/path-to-image/og.png
    type: image/jpg
    width: 560
    height: 300
  locale:
    '': en_us
fb:
  title: 'Page title'
  description: 'Page description'
  image:
    '': http://example.com/path-to-image/fb.png
    type: image/jpg
    width: 600
    height: 315</code></pre>

Of course, if youâ€™re running a dynamic site, you can do it any number of ways. One way Iâ€™ve implemented custom OGP images on a rails site is to specify a default image in the layout, and then use an instance variable in a view template to override the default image path.

## A work in progress
This is still something Iâ€™m playing around with. <%= link_to 'Check out the Github repository', 'https://github.com/BrettJay/ogp-template', target:'_blank' %> âœ¨
