---
title: Overengineering a Travel Itinerary Prototype
meta_description: A couple of weeks ago, I traveled to Japan...
date: 2019/02/28
---

A couple of weeks ago, I traveled to Japan (again).

I love traveling. Sure, the logistics bring their fair share of stresses, but I’ve found I enjoy the process of planning a trip — it occupies the time until departure, and it also alleviates feelings of underpreparedness.

When planning a trip, the end product is generally an itinerary. This solves two important problems:

1. Collecting relevant information that is often siloed in multiple places
2. Presenting information in a manner that is useful while on holiday

I’ve toyed with the idea of tackling a travel itinerary in the past, with plenty of draft Sketch designs lying around. But there’s a wide gulf of effort between a handful of design mockups, and a fully functional application. 

In the lead-up to my most recent Japan trip, I was able to make some pretty decent headway prototyping an Itinerary web application, using Middleman (and Netlify).

You can view the itinerary here: <%= link_to 'itinerary.brett.cool', 'https://itinerary.brett.cool', target: '_blank' %>.

---

## Collecting siloed information together
It’s unavoidable that relevant information for an upcoming trip will be spread amongst any number of places. For me, it’s often a combination of:

* **Email:** booking confirmations
* **Bookmarks:** general webpages
* **iPhone Apps:** such as Lonely Planet’s [Guides][lpg], and [Foursquare][fs] (Foursquare has a [Lists][fsl] feature I use frequently use too)
* **Youtube:** videos on destinations
* **Google Custom Maps:** plotting points of interest, accomodation, and other landmarks

[lpg]: https://itunes.apple.com/au/app/guides-by-lonely-planet/id1045791869
[fs]: https://foursquare.com
[fsl]: https://foursquare.com/user/8305275/lists/created

I typically enlist the help of a spreadsheet to collect and make sense of all this information. This is where **what** meets **when**:

<figure>
  <% image_tag 'blog/2019-02-28-prototyping-an-itinerary/spreadsheet.png', class: 'mt3 mb3', style: 'box-shadow: 0 7px 14px rgba(0,0,0,0.1); border-radius: 4px;' %>
</figure>


When it comes to level of detail for the **when**, I prefer to divide each day into three sections, with lunch and dinner in between. Each section focuses on locations in a neighbourhood or prefecture, and within each section, I like to list things to see and do in that area.

This provides days with structure, and enough flexibility to take into account travel time. (e.g. “let’s walk to Shinjuku in the morning, and see x, y, and z before lunch”).

But there’s a few critical problems with this format.

<figure class="iphonex_frame">
  <%= image_tag 'blog/2019-02-28-prototyping-an-itinerary/IMG_3165.png' %>
</figure>

Sitting at a computer and being able to comfortably switch between windows is a very different context to viewing the itinerary on day, with only your smartphone.

While it’s impressive Apple can deliver the full range of spreadsheeting features to the iPhone, pinching to pan around a spreadsheet isn’t ideal when referring to an itinerary in the wild.

Additionally, although the tabular format of a spreadsheet is handy at a high level, when filling in more detailed activities in cells for sections of a day, the implicit relationship between a column’s rows and that of its neighbours means you end up fighting against the spreadsheet, as cells inevitably end up with varying amounts of content.

Not only is the presentation of information on mobile not ideal, one of the most important questions — _“how do I get to my next location from here?”_ is not addressed at all. Sure, you can switch over to Google Maps, search for the name, and get directions, but with something you’ll be doing repeatedly, there must be a better way.

---

## Rapid development with Middleman

Middleman, like many static site generators, provides many of the benefits of dynamic languages running on a server, but with a build step that builds static files, that can be hosted basically anywhere.

One of the most powerful features of static site generators is the data layer API, which allows for you to specify data in a number of formats (JSON, Yaml, CSV), and programatically iterate over this data in the view layer.

With Middleman, it’s possible to store data in a single file, or multiple files within folders. I decided to represent each day as an individual file, within a dates folder.

```
data/
  dates/
    2019-02-06.yml
    2019-02-07.yml
    2019-02-08.yml
    [...]
```

Each day is represented with a filename corresponding to the date, in YYYY-MM-DD format. With this convention, the filename can be parsed by Ruby in to human-readable date formats using strftime.

When you query data in Middleman for a folder with multiple data files, the data is returned in a hash, where the key is the filename, and the value contains the file contents.

```
data.dates
→ {"2019-02-06"=>{⋯}, "2019-02-07"=>{⋯}, "2019-02-08"=>{⋯}}
```

You can use the filename as a key to receive the contents for that date:
      
```
data.dates['2019-02-06']<br/>
→ {"morning"=>{"area"=>"Flight SQ224", "activities"=>[{"transport"=>"per-to-sin"}]}, "lunch"=>"plane-meal", "afternoon"=>{"area"=>"Flight SQ622", "activities"=>[{"transport"=>"sin-to-kix"}]}, "dinner"=>"plane-meal", "night"=>{"area"=>"Osaka", "activities"=>[{"transport"=>"airport-to-osaka"}, {"place"=>"hotel-code", "verbiage"=>"Check in to"}]}}
```

Which brings us nicely to the schema for the date files. Here’s Feb 7:

```
morning:
  area: Kita / Chuo Ward
  activities:
    - place: lilo-coffee
      verbiage: Coffee at
    - place: umeda-sky-building
      verbiage: Visit
    - place: osaka-jo
      verbiage: Visit

  lunch: chicken-soba-osaka

  afternoon:
    area: Naniwa / Tennoji Ward
    activities:
      - place: shittenoji
        verbiage: See
      - place: shinsekai
        verbiage: Visit
      - place: brooklyn-roasting-company
        verbiage: Grab a coffee at

  dinner: dotonburi

  night:
    area: City and Dōtombori
    activities:
      - place: ebisu-bashi
        verbiage: See
```
